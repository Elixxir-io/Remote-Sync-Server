image: $DOCKER_IMAGE

before_script:
  - go version || echo "Go executable not found."
  - echo $CI_BUILD_REF
  - echo $CI_PROJECT_DIR
  - echo $PWD
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan -t rsa $GITLAB_SERVER > ~/.ssh/known_hosts
  - rm -rf ~/.gitconfig
  - git config --global url."git@$GITLAB_SERVER:".insteadOf "https://gitlab.com/"
  - git config --global url."git@$GITLAB_SERVER:".insteadOf "https://git.xx.network/" --add
  - export PATH=$HOME/go/bin:$PATH

stages:
  - test
  - build
#  - doc-update
  - version-check

test:
  stage: test
  except:
    - tags
  script:
    - go mod vendor -v
    - go build ./...
    - mkdir -p testdata

    # Test coverage
    - go-acc --covermode atomic --output testdata/coverage.out ./... -- -v
    # Exclude some specific packages and files
    - cat testdata/coverage.out | grep -v cmd | grep -v pb[.]go | grep -v main.go > testdata/coverage-real.out
    - go tool cover -func=testdata/coverage-real.out
    - go tool cover -html=testdata/coverage-real.out -o testdata/coverage.html

    # Test Coverage Check
    - go tool cover -func=testdata/coverage-real.out | grep "total:" | awk '{print $3}' | sed 's/\%//g' > testdata/coverage-percentage.txt
    - export CODE_CHECK=$(echo "$(cat testdata/coverage-percentage.txt) >= $MIN_CODE_COVERAGE" | bc -l)
    - (if [ "$CODE_CHECK" == "1" ]; then echo "Minimum coverage of $MIN_CODE_COVERAGE succeeded"; else echo "Minimum coverage of $MIN_CODE_COVERAGE failed"; exit 1; fi);
  artifacts:
    paths:
      - vendor/
      - testdata/


build:
  stage: build
  except:
    - tags
  script:
    - go mod vendor -v
    - make version
    - mkdir -p release
    - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags '-w -s' -o release/remoteSyncServer.linux64 main.go
    - GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -ldflags '-w -s' -o release/remoteSyncServer.darwin64 main.go
    - /upload-artifacts.sh release/
  artifacts:
    paths:
      - release/

# This pipeline job will attempt to have pkg.go.dev update docs for client/xxdk.
#
# pkg.go.dev relies on the proxy.golang.org service (go module cache/proxy) to discover versions of 
# Go modules to make docs of. The proxy keeps a list of all known versions of Go modules. The go 
# mod proxy does cache pulls for about 30 minutes, so if quickly successive commits are done in 
# master/release, this will fail to pull the latest client, and the docs will not update.
#doc-update:
#  stage: doc-update
#  script:
#    # GOPRIVATE is cleared so that the public cache is pulled instead of directly pulling client.
#    - NEXT_WAIT_TIME=0; until [ $NEXT_WAIT_TIME -eq 15 ] || GOOS=js GOARCH=wasm GOPRIVATE="" go install gitlab.com/elixxir/remoteSyncServer@$CI_COMMIT_SHA; do sleep 60; (( NEXT_WAIT_TIME+=1 )); done; [ $NEXT_WAIT_TIME -lt 15 ]
#  only:
#    - release
#    - master

version-check:
  stage: version-check
  except:
    - tags
  only:
    - master
  image: $DOCKER_IMAGE
  script:
    - GITTAG=$(git describe --tags)
    - CODEVERS=$(cat storage/version.go | grep "const SEMVER =" | cut -d ' ' -f4 | tr -d '"')
    - if [[ $GITTAG != $CODEVERS ]]; then echo "VERSION NUMBER BAD $GITTAG != $CODEVERS"; exit -1; fi
